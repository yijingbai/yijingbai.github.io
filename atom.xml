<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Yijing's Blog]]></title>
  <subtitle><![CDATA[Full-Stack Developer, Hackathon Lover]]></subtitle>
  <link href="http://yijingbai.github.io/blog/atom.xml" rel="self"/>
  <link href="http://yijingbai.github.io/blog"/>
  <updated>2014-05-28T15:19:02.699Z</updated>
  <id>http://yijingbai.github.io/blog/</id>
  <author>
    <name><![CDATA[YiJing Bai]]></name>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[Reading Backbone source code(5)]]></title>
    <link href="http://yijingbai.github.io/blog/2014/05/28/reading-backbone-source-code(5)/"/>
    <id>http://yijingbai.github.io/blog/2014/05/28/reading-backbone-source-code(5)/</id>
    <published>2014-05-28T14:42:20.000Z</published>
    <updated>2014-05-28T15:18:06.000Z</updated>
    <content type="html"><![CDATA[<p>Today, we talk about stoplistening:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre>    <span class="comment">// Tell this object to stop listening to either specific events ... or</span>
    <span class="comment">// to every object it's currently listening to.</span>
    stopListening: <span class="keyword">function</span>(obj, name, callback) {
      <span class="keyword">var</span> listeningTo = <span class="keyword">this</span>._listeningTo;
      <span class="keyword">if</span> (!listeningTo) <span class="keyword">return</span> <span class="keyword">this</span>;
      <span class="keyword">var</span> remove = !name && !callback;
      <span class="keyword">if</span> (!callback && <span class="keyword">typeof</span> name === <span class="string">'object'</span>) callback = <span class="keyword">this</span>;
      <span class="keyword">if</span> (obj) (listeningTo = {})[obj._listenId] = obj;
      <span class="keyword">for</span> (<span class="keyword">var</span> id <span class="keyword">in</span> listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, <span class="keyword">this</span>);
        <span class="keyword">if</span> (remove || _.isEmpty(obj._events)) <span class="keyword">delete</span> <span class="keyword">this</span>._listeningTo[id];
      }
      <span class="keyword">return</span> <span class="keyword">this</span>;
    }

  };
</pre></td></tr></table></figure>

<p>First, get all the event that listenning to now: </p>
<pre><code><span class="keyword">var</span> listeningTo = <span class="keyword">this</span>._listeningTo;</code></pre>
<p>Then defien a <code>listeningTo</code>list get all events that are listened to.<br>define a remove variable and assign expression:<br><code>!name &amp;&amp; !callback</code></p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Reading backbone source code]]></title>
    <link href="http://yijingbai.github.io/blog/2014/05/27/reading-backbone-source-code/"/>
    <id>http://yijingbai.github.io/blog/2014/05/27/reading-backbone-source-code/</id>
    <published>2014-05-27T13:24:27.000Z</published>
    <updated>2014-05-27T13:35:23.000Z</updated>
    <content type="html"><![CDATA[<p>Today, we will talk about trigger and stopListning function of backbone.<br>trigger function in backbone&#39;s event class is to fire all bound callbacks.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>trigger: <span class="keyword">function</span>(name) {
      <span class="keyword">if</span> (!<span class="keyword">this</span>._events) <span class="keyword">return</span> <span class="keyword">this</span>;
      <span class="keyword">var</span> args = slice.call(arguments, <span class="number">1</span>);
      <span class="keyword">if</span> (!eventsApi(<span class="keyword">this</span>, <span class="string">'trigger'</span>, name, args)) <span class="keyword">return</span> <span class="keyword">this</span>;
      <span class="keyword">var</span> events = <span class="keyword">this</span>._events[name];
      <span class="keyword">var</span> allEvents = <span class="keyword">this</span>._events.all;
      <span class="keyword">if</span> (events) triggerEvents(events, args);
      <span class="keyword">if</span> (allEvents) triggerEvents(allEvents, arguments);
      <span class="keyword">return</span> <span class="keyword">this</span>;
    },
</pre></td></tr></table></figure>

<pre><code>var <span class="keyword">events</span> = <span class="transposed_variable">this.</span>_<span class="keyword">events</span><span class="matrix">[name]</span>; </code></pre>
<p>Get the event list of event <code>name</code>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>var triggerEvents = function(events, args) {
    var ev, i = -<span class="number">1</span>, l = events<span class="variable">.length</span>, a1 = args[<span class="number">0</span>], a2 = args[<span class="number">1</span>], a3 = args[<span class="number">2</span>];
    <span class="keyword">switch</span> (args<span class="variable">.length</span>) {
      <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">while</span> (++i &lt; l) (ev = events[i])<span class="variable">.callback</span><span class="variable">.call</span>(ev<span class="variable">.ctx</span>); <span class="keyword">return</span>;
      <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">while</span> (++i &lt; l) (ev = events[i])<span class="variable">.callback</span><span class="variable">.call</span>(ev<span class="variable">.ctx</span>, a1); <span class="keyword">return</span>;
      <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">while</span> (++i &lt; l) (ev = events[i])<span class="variable">.callback</span><span class="variable">.call</span>(ev<span class="variable">.ctx</span>, a1, a2); <span class="keyword">return</span>;
      <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">while</span> (++i &lt; l) (ev = events[i])<span class="variable">.callback</span><span class="variable">.call</span>(ev<span class="variable">.ctx</span>, a1, a2, a3); <span class="keyword">return</span>;
      <span class="keyword">default</span>: <span class="keyword">while</span> (++i &lt; l) (ev = events[i])<span class="variable">.callback</span><span class="variable">.apply</span>(ev<span class="variable">.ctx</span>, args); <span class="keyword">return</span>;
    }
  };
</pre></td></tr></table></figure>

<p>this function is to trigger the function events with args. There use a trick that expand the args manually. Thus, when call the callback funtion. It will be faster.</p>
]]></content>
    <category scheme="http://yijingbai.github.io/blog/tags/javascript/" term="javascript"/>
    <category scheme="http://yijingbai.github.io/blog/tags/backbone/" term="backbone"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[reading the backbone source code (3)]]></title>
    <link href="http://yijingbai.github.io/blog/2014/05/25/reading-the-backbone-source-code-(3)/"/>
    <id>http://yijingbai.github.io/blog/2014/05/25/reading-the-backbone-source-code-(3)/</id>
    <published>2014-05-25T14:23:41.000Z</published>
    <updated>2014-05-25T14:45:18.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>    <span class="regexp">//</span> Bind an event to only be triggered a single time. After the first time
    <span class="regexp">//</span> the callback <span class="keyword">is</span> invoked, it will be removed.
    once: <span class="reserved">function</span>(name, callback, context) {
      <span class="keyword">if</span> (!eventsApi(<span class="keyword">this</span>, <span class="string">'once'</span>, name, [callback, context]) || !callback) <span class="keyword">return</span> <span class="keyword">this</span>;
      <span class="reserved">var</span> self = <span class="keyword">this</span>;
      <span class="reserved">var</span> once = _.once(<span class="reserved">function</span>() {
        self.<span class="literal">off</span>(name, once);
        callback.apply(<span class="keyword">this</span>, arguments);
      });
      once._callback = callback;
      <span class="keyword">return</span> <span class="keyword">this</span>.<span class="literal">on</span>(name, once, context);
    },
</pre></td></tr></table></figure>

<p>As is wrote in comment, once function will bind an event that will only be triggered a single time.</p>
<pre><code><span class="function"><span class="title">if</span> <span class="params">(!<span class="function_name">eventsApi</span>(this, 'once', name, [callback, context]) || !callback)</span> <span class="title">return</span> <span class="title">this</span>;</code></pre>
<p>This code is judge whether the parameter can bind the event.<br>Then,</p>
<pre><code>var once = _<span class="preprocessor">.once</span>(function() {
        self<span class="preprocessor">.off</span>(name, once)<span class="comment">;</span>
        callback<span class="preprocessor">.apply</span>(this, arguments)<span class="comment">;</span>
      })<span class="comment">;</span></code></pre>
<p>This code use a function in underscore.js, _.once function. The document is like the following:</p>
<pre><code>_.once(<span class="keyword">function</span>) 
Creates a version <span class="keyword">of</span> the <span class="function"><span class="keyword">function</span> <span class="title">that</span> <span class="title">can</span> <span class="title">only</span> <span class="title">be</span> <span class="title">called</span> <span class="title">one</span> <span class="title">time</span>. <span class="title">Repeated</span> <span class="title">calls</span> <span class="title">to</span> <span class="title">the</span> <span class="title">modified</span> <span class="title">function</span> <span class="title">will</span> <span class="title">have</span> <span class="title">no</span> <span class="title">effect</span>, <span class="title">returning</span> <span class="title">the</span> <span class="title">value</span> <span class="title">from</span> <span class="title">the</span> <span class="title">original</span> <span class="title">call</span>. <span class="title">Useful</span> <span class="title">for</span> <span class="title">initialization</span> <span class="title">functions</span>, <span class="title">instead</span> <span class="title">of</span> <span class="title">having</span> <span class="title">to</span> <span class="title">set</span> <span class="title">a</span> <span class="title">boolean</span> <span class="title">flag</span> <span class="title">and</span> <span class="title">then</span> <span class="title">check</span> <span class="title">it</span> <span class="title">later</span>.</code></pre>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>var initialize = _<span class="preprocessor">.once</span>(createApplication)<span class="comment">;</span>
initialize()<span class="comment">;</span>
initialize()<span class="comment">;</span>
// Application is only created once.
</pre></td></tr></table></figure>

<p>this api will generate a function that can only be called once. In this function, it will call <code>self.off</code> function to unbind the event then apply this on the callback function. After this two statement, there will be no event binded on this object.</p>
<p>the off function is this:</p>
<pre><code>// Remove one <span class="keyword">or</span> many callbacks. If `context` <span class="keyword">is</span> null, removes all
// callbacks <span class="keyword">with</span> <span class="keyword">that</span> function. If `callback` <span class="keyword">is</span> null, removes all
// callbacks <span class="keyword">for</span> <span class="keyword">the</span> event. If `<span class="property">name</span>` <span class="keyword">is</span> null, removes all bound
// callbacks <span class="keyword">for</span> all events.
off: function(<span class="property">name</span>, callback, context) {
  var retain, ev, events, names, i, l, j, k;
  <span class="keyword">if</span> (!this._events || !eventsApi(this, 'off', <span class="property">name</span>, [callback, context])) <span class="constant">return</span> this;
  <span class="keyword">if</span> (!<span class="property">name</span> &amp;&amp; !callback &amp;&amp; !context) {
    this._events = void <span class="number">0</span>;
<span class="command">    return</span> this;
  }
  names = <span class="property">name</span> ? [<span class="property">name</span>] : _.keys(this._events);
  <span class="keyword">for</span> (i = <span class="number">0</span>, l = names.<span class="property">length</span>; i &lt; l; i++) {
    <span class="property">name</span> = names[i];
    <span class="keyword">if</span> (events = this._events[<span class="property">name</span>]) {
      this._events[<span class="property">name</span>] = retain = [];
      <span class="keyword">if</span> (callback || context) {
        <span class="keyword">for</span> (j = <span class="number">0</span>, k = events.<span class="property">length</span>; j &lt; k; j++) {
          ev = events[j];
          <span class="keyword">if</span> ((callback &amp;&amp; callback !== ev.callback &amp;&amp; callback !== ev.callback._callback) ||
              (context &amp;&amp; context !== ev.context)) {
            retain.push(ev);
          }
        }
      }
      <span class="keyword">if</span> (!retain.<span class="property">length</span>) delete this._events[<span class="property">name</span>];
    }
  }
<span class="command">
  return</span> this;
},

// Trigger one <span class="keyword">or</span> many events, firing all bound callbacks. Callbacks are
// passed <span class="keyword">the</span> same arguments <span class="keyword">as</span> `trigger` <span class="keyword">is</span>, <span class="keyword">apart from</span> <span class="keyword">the</span> event <span class="property">name</span>
// (unless you're listening <span class="function_start"><span class="keyword">on</span> </span>`<span class="string">"all"</span>`, which will cause your callback <span class="keyword">to</span>
// receive <span class="keyword">the</span> <span class="constant">true</span> <span class="property">name</span> <span class="keyword">of</span> <span class="keyword">the</span> event <span class="keyword">as</span> <span class="keyword">the</span> <span class="keyword">first</span> argument).
trigger: function(<span class="property">name</span>) {
  <span class="keyword">if</span> (!this._events) <span class="constant">return</span> this;
  var args = slice.call(arguments, <span class="number">1</span>);
  <span class="keyword">if</span> (!eventsApi(this, 'trigger', <span class="property">name</span>, args)) <span class="constant">return</span> this;
  var events = this._events[<span class="property">name</span>];
  var allEvents = this._events.all;
  <span class="keyword">if</span> (events) triggerEvents(events, args);
  <span class="keyword">if</span> (allEvents) triggerEvents(allEvents, arguments);
<span class="command">  return</span> this;
},</code></pre>
<p>```</p>
<p>these three statement:</p>
<pre><code><span class="function"><span class="title">if</span> <span class="params">(!name &amp;&amp; !callback &amp;&amp; !context)</span> {
    <span class="title">this</span>._<span class="title">events</span> = <span class="title">void</span> 0;
    <span class="title">return</span> <span class="title">this</span>;
  }</code></pre>
<p>judge that when the name, callback, context is all null, then assign the _event to void 0; <em>I don&#39;t understand what the meaning of void 0; and what can it provide</em></p>
]]></content>
    <category scheme="http://yijingbai.github.io/blog/tags/javascript/" term="javascript"/>
    <category scheme="http://yijingbai.github.io/blog/tags/backbone/" term="backbone"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[reading the backbone source code (2)]]></title>
    <link href="http://yijingbai.github.io/blog/2014/05/24/reading-the-backbone-source-code-(2)/"/>
    <id>http://yijingbai.github.io/blog/2014/05/24/reading-the-backbone-source-code-(2)/</id>
    <published>2014-05-24T15:35:30.000Z</published>
    <updated>2014-05-25T14:46:45.000Z</updated>
    <content type="html"><![CDATA[<p>Let continute reading the backboen code. In event class, there is a on function:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="literal">on</span>: <span class="reserved">function</span>(name, callback, context) {
      <span class="keyword">if</span> (!eventsApi(<span class="keyword">this</span>, <span class="string">'on'</span>, name, [callback, context]) || !callback) <span class="keyword">return</span> <span class="keyword">this</span>;
      <span class="keyword">this</span>._events || (<span class="keyword">this</span>._events = {});
      <span class="reserved">var</span> events = <span class="keyword">this</span>._events[name] || (<span class="keyword">this</span>._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || <span class="keyword">this</span>});
      <span class="keyword">return</span> <span class="keyword">this</span>;
    }
</pre></td></tr></table></figure>

<p>this function will bind the event in <code>name</code> to <code>callback</code> function.The if statement:</p>
<pre><code><span class="function"><span class="title">if</span> <span class="params">(!<span class="function_name">eventsApi</span>(this, 'on', name, [callback, context]) || !callback)</span> 
<span class="title">return</span> <span class="title">this</span>;</code></pre>
<p>this use the function we talked yesterday and when bind success it will return false.</p>
<pre><code><span class="transposed_variable">this.</span>_<span class="keyword">events</span> || (<span class="transposed_variable">this.</span>_<span class="keyword">events</span> = <span class="cell">{}</span>);</code></pre>
<p>initialize the _events object. Then</p>
<pre><code> var <span class="keyword">events</span> = <span class="transposed_variable">this.</span>_<span class="keyword">events</span><span class="matrix">[name]</span> || (<span class="transposed_variable">this.</span>_<span class="keyword">events</span><span class="matrix">[name]</span> = <span class="matrix">[]</span>);</code></pre>
<p>will use the event name as the key to initialize a events array.<br>At last,</p>
<pre><code><span class="tag">events</span><span class="class">.push</span>(<span class="rules">{<span class="rule"><span class="attribute">callback</span>:<span class="value"> callback, context: context, ctx: context || this}</span></span></span>)</code></pre>
<p>push a object with callback function and context and return this.</p>
]]></content>
    <category scheme="http://yijingbai.github.io/blog/tags/javascript/" term="javascript"/>
    <category scheme="http://yijingbai.github.io/blog/tags/backbone/" term="backbone"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Reading the Backbone source code]]></title>
    <link href="http://yijingbai.github.io/blog/2014/05/23/reading-the-backbone-source-code/"/>
    <id>http://yijingbai.github.io/blog/2014/05/23/reading-the-backbone-source-code/</id>
    <published>2014-05-23T14:13:31.000Z</published>
    <updated>2014-05-25T14:45:31.000Z</updated>
    <content type="html"><![CDATA[<p>From this post, I will read backbone&#39;s source code and write down my thinking.<br>At the beginning of the file,</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="list">(<span class="title">function</span><span class="body"><span class="list">(<span class="title">root</span><span class="body">, factory)</span></span> {

  // Set up Backbone appropriately for the environment. Start with AMD.
  if <span class="list">(<span class="title">typeof</span><span class="body"> define === 'function' <span class="keyword">&&</span> define.amd)</span></span> {
    define<span class="list">(<span class="body">['underscore', 'jquery', 'exports'], function<span class="list">(<span class="title">_</span><span class="body">, $, exports)</span></span> {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory<span class="list">(<span class="title">root</span><span class="body">, exports, _, $)</span></span><span class="comment">;</span>
    })</span></span><span class="comment">;</span>

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if <span class="list">(<span class="title">typeof</span><span class="body"> exports !== 'undefined')</span></span> {
    var _ = require<span class="list">(<span class="body">'underscore')</span></span><span class="comment">;</span>
    factory<span class="list">(<span class="title">root</span><span class="body">, exports, _)</span></span><span class="comment">;</span>

  // Finally, as a browser global.
  } else {
    root.Backbone = factory<span class="list">(<span class="title">root</span><span class="body">, {}, root._, <span class="list">(<span class="title">root</span><span class="body">.jQuery || root.Zepto || root.ender || root.$)</span></span>)</span></span><span class="comment">;</span>
  }

}<span class="list">(<span class="title">this</span><span class="body">, function<span class="list">(<span class="title">root</span><span class="body">, Backbone, _, $)</span></span> {
</pre></td></tr></table></figure>

<p>There implement factory method here. First define a factory parameter, and then passed a anoynomous function with parameter root, Backbone, _, $. These things are the dependency of backbone.</p>
<p>These use three judgement to handle three situations.</p>
<p>when there have a define function, which meaning this web app may use require.js, and provide AMD, use define function and load the module.<br>if there have exports, it make use node.js or common.js, so jquery is not needed.<br>if in normal browser, juse need to seet it as gloabl variable.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre>  <span class="regexp">//</span> Regular expression used to split event strings.
  <span class="reserved">var</span> eventSplitter = <span class="regexp">/\s+/</span>;

  <span class="regexp">//</span> Implement fancy features <span class="keyword">of</span> the Events API such as multiple event
  <span class="regexp">//</span> names `<span class="javascript"><span class="string">"change blur"</span></span>` <span class="keyword">and</span> jQuery-style event maps `<span class="javascript">{change: action}</span>`
  <span class="regexp">//</span> <span class="keyword">in</span> terms <span class="keyword">of</span> the existing API.
  <span class="reserved">var</span> eventsApi = <span class="reserved">function</span>(obj, action, name, rest) {
    <span class="keyword">if</span> (!name) <span class="keyword">return</span> <span class="literal">true</span>;

    <span class="regexp">//</span> Handle event maps.
    <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'object'</span>) {
      <span class="keyword">for</span> (<span class="reserved">var</span> key <span class="keyword">in</span> name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      <span class="keyword">return</span> <span class="literal">false</span>;
    }

    <span class="regexp">//</span> Handle space separated event names.
    <span class="keyword">if</span> (eventSplitter.test(name)) {
      <span class="reserved">var</span> names = name.split(eventSplitter);
      <span class="keyword">for</span> (<span class="reserved">var</span> i = <span class="number">0</span>, l = names.length; i &lt; l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      <span class="keyword">return</span> <span class="literal">false</span>;
    }

    <span class="keyword">return</span> <span class="literal">true</span>;
  };
</pre></td></tr></table></figure>

<p>This block of code is in the Event. It implement the facny feature of Event API like “change title”.<br>to Handle event maps,</p>
<pre><code><span class="function"><span class="title">for</span> <span class="params">(var key in name)</span> {
    <span class="title">obj</span>[<span class="title">action</span>].<span class="title">apply</span><span class="params">(obj, [key, name[key]].<span class="function_name">concat</span>(rest))</span>;
}</code></pre>
<p>it traverse the key on event maps object concat the array [key, name[key]] and rest then get a array: [key, name[key], callback, context, etc..], then use apply to call it on obj, and send this array as parameter. for example, if pass a</p>
<pre><code><span class="rules">{
    <span class="rule">{
        <span class="attribute">change</span>:<span class="value"> function () {
        console.<span class="function">log(<span class="string">'hello world'</span>)</span>
    }</span></span></span>
}</code></pre>
<p>and action is ‘on’, the statement will be<br>obj[‘on’].apply(obj, [‘on’, function, ])</p>
]]></content>
    <category scheme="http://yijingbai.github.io/blog/tags/javascript/" term="javascript"/>
    <category scheme="http://yijingbai.github.io/blog/tags/backbone/" term="backbone"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[A introduce to Backbone]]></title>
    <link href="http://yijingbai.github.io/blog/2014/05/22/a-introduce-to-backbone/"/>
    <id>http://yijingbai.github.io/blog/2014/05/22/a-introduce-to-backbone/</id>
    <published>2014-05-22T15:19:01.000Z</published>
    <updated>2014-05-25T14:45:50.000Z</updated>
    <content type="html"><![CDATA[<p>Backbone is a Simple and Powerful framwork for the web app have a lot of data models, and have a lot of operations on it.</p>
<p>The core class for backbone is Model, Event, Collection.</p>
<h1>Model</h1>
<p>The Model is used to define the model used in the app.<br>like:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>var Note = Backbone.Model.extend({
  initialize: <span class="keyword">function</span>() { <span class="keyword">...</span> },
  author: <span class="keyword">function</span>() { <span class="keyword">...</span> },
  coordinates: <span class="keyword">function</span>() { <span class="keyword">...</span> },
  allowedToEdit: <span class="keyword">function</span>(account) {
    <span class="keyword">return</span> true;
  }
});
</pre></td></tr></table></figure>

<p><code>Backbone.Model.extend</code> is a method that can let you extend the default model of backbone and create your own one. By doing this, you can overwrite the function of it as well as add some new one.</p>
<p>After define a model, you can create it your object use it.Just simply pass the object to it.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="tag">new</span> <span class="tag">Note</span>(<span class="rules">{
  <span class="rule"><span class="attribute">title</span>:<span class="value"> <span class="string">"One Thousand and One Nights"</span>,
  author: <span class="string">"Scheherazade"</span>
}</span></span></span>);
</pre></td></tr></table></figure>

]]></content>
    <category scheme="http://yijingbai.github.io/blog/tags/backbone/" term="backbone"/>
    <category scheme="http://yijingbai.github.io/blog/tags/javascript/" term="javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Something about post json using .ajax in jquery]]></title>
    <link href="http://yijingbai.github.io/blog/2014/05/21/something-about-post-json-using-ajax-in-jquery/"/>
    <id>http://yijingbai.github.io/blog/2014/05/21/something-about-post-json-using-ajax-in-jquery/</id>
    <published>2014-05-21T14:56:48.000Z</published>
    <updated>2014-05-25T14:46:58.000Z</updated>
    <content type="html"><![CDATA[<p>When I try to use jquery&#39;s <code>$.ajax</code> method post a json to server, I found a strange phenomenon that if I pass the json object as data, it will post it as a form string. For example, the object I want to post is:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="rules">{
    <span class="rule"><span class="attribute">name</span>:<span class="value"> <span class="string">'yijing'</span>,
    age:  <span class="string">'22'</span>,
    like: [<span class="string">'computer'</span>, <span class="string">'swimming'</span>]
}</span></span></span>
</pre></td></tr></table></figure>

<p>the array in it will transform to a string thing:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="attribute">like[]</span>: <span class="string">'computer'</span>
<span class="attribute">like[]</span>: <span class="string">'swiming'</span>
</pre></td></tr></table></figure>

<p>when server side parse it as a json string, it will cause an error.</p>
<p>The problem is that you can not directly pass the object to the data field of .ajax()&#39;s config, you should covert it to a json string:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="filename">JSON.stringify(dataobject)
</pre></td></tr></table></figure>

<p>What‘s more, if you want post a json to server, don’t forget to add contentType in the config:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>contentType:"application/json;char<span class="operator"><span class="keyword">set</span>=utf-<span class="number">8</span><span class="string">"
</pre></td></tr></table></figure>

<p>because the .ajax method automatically set it as form if you don&#39;t pass it.</p>
]]></content>
    <category scheme="http://yijingbai.github.io/blog/tags/jquery/" term="jquery"/>
    <category scheme="http://yijingbai.github.io/blog/tags/ajax/" term="ajax"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Thinking of my FUTURE]]></title>
    <link href="http://yijingbai.github.io/blog/2014/05/19/thinking-of-my-future/"/>
    <id>http://yijingbai.github.io/blog/2014/05/19/thinking-of-my-future/</id>
    <published>2014-05-19T13:32:37.000Z</published>
    <updated>2014-05-25T14:47:13.000Z</updated>
    <content type="html"><![CDATA[<p>I am in a decadent status for about 1 month.</p>
<p>In This period of time, I have always thought about my future and what way I want to go.</p>
<p>There are many things I want to do, for example, running everyday, writing blog everyday, push to github everyday, use GTD method to manage my work and study.</p>
<p>But I always can&#39;t keep doing it. These things are great, but I stopped.</p>
<p>So I think what the most important thing is that, how many things you want to do is not the important part. What the most important thing is that how many things you can keep doing everyday. </p>
<p>Done one thing is better than think 10 things.</p>
<p>Just Do It.</p>
]]></content>
    <category scheme="http://yijingbai.github.io/blog/tags/self development/" term="self development"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[a new way to use _.template]]></title>
    <link href="http://yijingbai.github.io/blog/2014/05/19/a-new-way-to-use-_template/"/>
    <id>http://yijingbai.github.io/blog/2014/05/19/a-new-way-to-use-_template/</id>
    <published>2014-05-19T13:15:05.000Z</published>
    <updated>2014-05-25T14:46:05.000Z</updated>
    <content type="html"><![CDATA[<p>Today, I decided to use Backbone to write a new webapp. Then I read the document of it, and found a interesting technique to use <code>_.template</code> of <code>underscore.js</code>.</p>
<p>The old way I use it is like that:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>var timelineTemplate = _.template('<span class="tag">&lt;<span class="title">li</span>&gt;</span>\
                  <span class="tag">&lt;<span class="title">time</span> <span class="attribute">class</span>=<span class="value">"cbp_tmtime"</span>&gt;</span>\
                    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"date"</span>&gt;</span><span class="vbscript">&lt;%= <span class="built_in">day</span> %&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>\
                    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"time"</span>&gt;</span>\
                      <span class="vbscript">&lt;%= <span class="built_in">time</span> %&gt;</span>\
                      <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"semi-bold"</span>&gt;</span><span class="vbscript">&lt;%= moa %&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>\
                    <span class="tag">&lt;/<span class="title">span</span>&gt;</span>\
                  <span class="tag">&lt;/<span class="title">time</span>&gt;</span>\
                  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"cbp_tmicon success animated bounceIn"</span>&gt;</span>\
                    <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-comments"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>\
                  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>\
                  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"cbp_tmlabel"</span>&gt;</span>\
                    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"p-t-10 p-l-30 p-r-20 p-b-20 xs-p-r-10 xs-p-l-10 xs-p-t-5"</span>&gt;</span>\
                      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"m-t-5 dark-text"</span> <span class="attribute">style</span>=<span class="value">"text-align:center;"</span>&gt;</span>\
                        <span class="tag">&lt;<span class="title">h3</span> &gt;</span>\
                          <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"semi-bold"</span>&gt;</span><span class="vbscript">&lt;%= content %&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>\
                        <span class="tag">&lt;/<span class="title">h3</span>&gt;</span>\
                      <span class="tag">&lt;/<span class="title">div</span>&gt;</span>\
                    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>\
                    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>\
                  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>\
                <span class="tag">&lt;/<span class="title">li</span>&gt;</span>');
</pre></td></tr></table></figure>

<p>This way integrate so much html code in the html file. It is very ugly.<br>The new way is that in the html file, create a script tag and write type is text/template, and set a <code>id</code> or <code>class</code> on it, and put your template code in it, like that:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/template"</span> <span class="attribute">id</span>=<span class="value">"item-task"</span>&gt;</span><span class="javascript">
 &lt;div class=<span class="string">"col-md-12"</span>&gt;
      <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"grid simple"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"grid-title no-border"</span>&gt;</span>
          <span class="tag">&lt;<span class="title">h4</span>&gt;</span>
            <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"semi-bold"</span>&gt;</span><span class="vbscript">&lt;%= ename %&gt;</span> - <span class="vbscript">&lt;%= cname %&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
          <span class="tag">&lt;/<span class="title">h4</span>&gt;</span>
          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"tools"</span>&gt;</span>
            接口人:<span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"semi-bold"</span>&gt;</span><span class="vbscript">&lt;%= creator %&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">class</span>=<span class="value">"collapse"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">class</span>=<span class="value">"remove"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
          <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"grid-body no-border"</span>&gt;</span>
          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-md-10"</span>&gt;</span>
              <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row"</span>&gt;</span>
                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-md-4"</span>&gt;</span>
                描述:<span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"semi-bold"</span>&gt;</span><span class="vbscript">&lt;%= desc %&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-md-4"</span>&gt;</span>
                标签: <span class="vbscript">&lt;% _.<span class="keyword">each</span>(tags, <span class="keyword">function</span>(t) {;%&gt;</span> <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"label label-success  m-l-10"</span>&gt;</span><span class="vbscript">&lt;%= t %&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span> <span class="vbscript">&lt;%});%&gt;</span>
                <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-md-4"</span>&gt;</span>
                创建时间:<span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"semi-bold"</span>&gt;</span><span class="vbscript">&lt;%= updatetime %&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
              <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
              <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row"</span>&gt;</span>
                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-md-4 m-t-10"</span>&gt;</span>
                运行周期:<span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"semi-bold"</span>&gt;</span><span class="vbscript">&lt;%= cron %&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-md-4 m-t-10"</span>&gt;</span>
                代码类型:<span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"semi-bold"</span>&gt;</span><span class="vbscript">&lt;%= codetype %&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-md-4 m-t-10"</span>&gt;</span>
                运行参数:<span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"semi-bold"</span>&gt;</span><span class="vbscript">&lt;%= param %&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
              <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
          <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></span></span>
</pre></td></tr></table></figure>

<p>and then just write:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="number">_</span>.template(<span class="variable">$(</span><span class="string">'#item-task'</span>).html())
</pre></td></tr></table></figure>

<p>Beautiful, isn&#39;t it ?</p>
]]></content>
    <category scheme="http://yijingbai.github.io/blog/tags/javascript/" term="javascript"/>
    <category scheme="http://yijingbai.github.io/blog/tags/backbone/" term="backbone"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[how to use django-RESTful api framework]]></title>
    <link href="http://yijingbai.github.io/blog/2013/12/03/how-to-use-django-restful-api-framework/"/>
    <id>http://yijingbai.github.io/blog/2013/12/03/how-to-use-django-restful-api-framework/</id>
    <published>2013-12-03T15:58:38.000Z</published>
    <updated>2013-12-11T14:47:52.000Z</updated>
    <content type="html"><![CDATA[<p>These days, I always use django restful framework to make some RESTful API. And also face many questions.</p>
<p>So I will write a summary here about these questions and some tricks to use this.</p>
<figure class="highlight lang-py"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">ProtoFieldsViewSet</span><span class="params">(WrapCreateModelMixin,
                        WrapUpdateModelMixin,
                        WrapRetrieveModelMixin,
                        WrapListModelMixin,
                        viewsets.GenericViewSet)</span>:</span>
    <span class="string">"""
    ProtoField的viewsets,包括新建,更新,详情,列表
    """</span>
    queryset = ProtoField.objects.order_by(<span class="string">'source'</span>)
    serializer_class = ProtoFieldSerializer
</pre></td></tr></table></figure>

<p>For example, use this code could easily make a api with POST,PUT,GET and can provide create,update,get,list object function.</p>
<p>This is kind of a muti-extend. with the basic genericViewSet provide the base function and property, and then if you need some function, you just need to add the corresponding mixins.</p>
<p>If you don&#39;t want to use the provided mixin, you can write API your self:</p>
<figure class="highlight lang-py"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">ProtoFieldsValidation</span><span class="params">(APIView)</span>:</span>
    <span class="string">"""
    判断Protofield是否有重复的API
    """</span>
    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span>
        <span class="keyword">if</span> <span class="string">'key'</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:
            <span class="keyword">return</span> Response(returnSuccess(<span class="string">'Please Provide key'</span>))
        fields = ProtoField.objects.filter(status=<span class="number">1</span>)
        keylist = [p.key <span class="keyword">for</span> p <span class="keyword">in</span> fields]
        <span class="keyword">return</span> Response(returnSuccess({<span class="string">'result'</span>: kwargs[<span class="string">'key'</span>] <span class="keyword">not</span> <span class="keyword">in</span> keylist}))
</pre></td></tr></table></figure>

<p>like this. You just need to make a Class that extend APIView class. Then you can add get, post, put …etc. function corresponding to the GET,PUT,POST requests.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[RESTful API design]]></title>
    <link href="http://yijingbai.github.io/blog/2013/11/12/restful-api-design/"/>
    <id>http://yijingbai.github.io/blog/2013/11/12/restful-api-design/</id>
    <published>2013-11-12T10:59:28.000Z</published>
    <updated>2013-11-12T11:06:00.000Z</updated>
    <content type="html"><![CDATA[<p>I have startied to study RESTful API,Use Django Restful API framework</p>
]]></content>
    <category scheme="http://yijingbai.github.io/blog/tags/RESTful/" term="RESTful"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Wating for my JingJS buddy]]></title>
    <link href="http://yijingbai.github.io/blog/2013/11/08/wating-for-my-jingjs-buddy/"/>
    <id>http://yijingbai.github.io/blog/2013/11/08/wating-for-my-jingjs-buddy/</id>
    <published>2013-11-08T13:05:25.000Z</published>
    <updated>2014-05-25T14:47:23.000Z</updated>
    <content type="html"><![CDATA[<p>I will be a volunteer of JingJS during this weekend and I am buddy of a foreign speaker, nick.<br>Now I am wating for him, and hope to see him later~ lol<br><img src="http://ww2.sinaimg.cn/large/74007c8ejw1eae22tj9nej21kw16odsh.jpg" alt=""></p>
]]></content>
    <category scheme="http://yijingbai.github.io/blog/tags/conference/" term="conference"/>
    <category scheme="http://yijingbai.github.io/blog/tags/social/" term="social"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[How to define __unicode__ for django model]]></title>
    <link href="http://yijingbai.github.io/blog/2013/11/08/how-to-define-unicode-function-for-django-model/"/>
    <id>http://yijingbai.github.io/blog/2013/11/08/how-to-define-unicode-function-for-django-model/</id>
    <published>2013-11-08T07:49:16.000Z</published>
    <updated>2014-05-25T14:46:28.000Z</updated>
    <content type="html"><![CDATA[<p>Today I wrote a simple model using django, to make it display more friendly, we have to implement a __unicode__  function like this:</p>
<figure class="highlight lang-python"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">()</span>:</span>
	<span class="keyword">return</span>
</pre></td></tr></table></figure>

<p>but writing something like</p>
<pre><code>"hello <span class="special">{</span>0<span class="special">}</span><span class="command">\n</span><span class="command">\t</span> world <span class="special">{</span>1<span class="special">}</span><span class="command">\n</span><span class="command">\t</span>".format(src, dest)</code></pre>
<p>is ugly, so we can use a easier way:</p>
<figure class="highlight lang-python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre> <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> <span class="string">u"""
        Configure {0}:
            User: {1}
            status: {2}
            datapath: {3}
            datarule: {4}
            retaintime: {5}
            update_time: {6}
        """</span>.format(
            self.id, self.user, self.status,
            self.datapath, self.datarule,
            self.retaintime, self.update_time)
</pre></td></tr></table></figure>

<p><strong>remember add u</strong> before “”“, and the format in ”“” “”&quot; will be saved,so we do not need to write \t or \n etc. anymore.</p>
]]></content>
    <category scheme="http://yijingbai.github.io/blog/tags/python/" term="python"/>
    <category scheme="http://yijingbai.github.io/blog/tags/django/" term="django"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Hexo configuration]]></title>
    <link href="http://yijingbai.github.io/blog/2013/11/07/hexo-使用配置/"/>
    <id>http://yijingbai.github.io/blog/2013/11/07/hexo-使用配置/</id>
    <published>2013-11-07T12:59:00.000Z</published>
    <updated>2014-05-25T14:46:21.000Z</updated>
    <content type="html"><![CDATA[<p>When using Hexo, especially it is deployed on a second directory, we should not only change following attribute in _config.yml</p>
<pre><code><span class="title">url</span>:
<span class="title">root</span>:</code></pre>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>    <span class="attribute">efefef
</pre></td></tr></table></figure>

<p>but also change</p>
<pre><code>themes/theme name/<span class="filename">_config.yml</code></pre>
<p>if you forget that, the js, css file in the template will not be loaded successfully.</p>
]]></content>
    <category scheme="http://yijingbai.github.io/blog/tags/Hexo/" term="Hexo"/>
    <category scheme="http://yijingbai.github.io/blog/tags/blog/" term="blog"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://yijingbai.github.io/blog/2013/11/07/hello-world-1/"/>
    <id>http://yijingbai.github.io/blog/2013/11/07/hello-world-1/</id>
    <published>2013-11-07T12:22:20.000Z</published>
    <updated>2013-11-08T08:18:07.000Z</updated>
    <content type="html"><![CDATA[<h3>My First Post</h3>
<p>I begin to write post~<br>This is my first post, I will put my development experiences there.</p>
]]></content>
  </entry>
</feed>
